#!/bin/sh
# $MirOS: contrib/code/jupp/mkinstalldirs,v 1.7 2006/10/16 18:49:43 tg Exp $
# _MirOS: contrib/gnu/aux/mkinstalldirs,v 1.8 2006/10/16 18:46:41 tg Exp $
#-
# Copyright (c) 2004, 2005, 2006
#	Thorsten Glaser <tg@mirbsd.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# Advertising materials mentioning features or use of this work must
# display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a defect.

if test x"$KSH_VERSION" = x; then
	if test x"$MKSH" = x; then
		MKSH=/bin/mksh
	fi
	if test -f $MKSH; then
		SHELL=$MKSH
	elif test x"`mksh -c 'echo foo'`" = xfoo; then
		MKSH=mksh
		SHELL=mksh
	else
		MKSH=
	fi
	if test -n "$MKSH"; then
		export SHELL
		case $# in
		0)	exec $MKSH "$0" ;;
		*)	exec $MKSH "$0" "$@" ;;
		esac
	fi
	# Only here if spawning mksh failed
	test x"$BASH_VERSION" = x && for i in {,/usr{,/local},/sw}/bin; do
		if test -f $i/bash; then
			SHELL=$i/bash
			export SHELL
			case $# in
			0)	exec $i/bash "$0" ;;
			*)	exec $i/bash "$0" "$@" ;;
			esac
		fi
	done
fi

# XXX how to check for ksh88?
if [ -n "$BASH_VERSION" ]; then
	shopt -s extglob
	p=echo
elif [ -n "$SH_VERSION" ]; then
	case $SH_VERSION in
	*KSH*)
		set +o sh +o posix
		p=print
		;;
	esac
elif [[ -n $KSH_VERSION ]]; then
	p=print
fi

if [ -z "$p" ]; then
	echo "Shell not supported; go to http://mirbsd.de/mksh"
	exit 1
fi

usage()
{
	echo "$0 [-h] [-m mode] dir ..."
	exit 1
}

if [ -n "$BASH_VERSION" ]; then
	typeset -i mode=8#17777
else
	typeset -i8 mode=8#17777
fi

allargs="$*"

[[ $allargs = *@(--help)* || $allargs = *@(--version)* ]] && \
	usage

while getopts "hm:" opt; do
	case $opt in
	h)	usage ;;
	m)	[[ -z $OPTARG ]] && usage
		let mode="8#$OPTARG"
		;;
	esac
done
shift $((OPTIND - 1))

if (( mode > 8#7777 )); then
	exec /bin/mkdir -p -- "$@"
else
	if [ -n "$BASH_VERSION" ]; then
		exec /bin/mkdir -p -m $(printf %o $mode) "$@"
	else
		exec /bin/mkdir -p -m ${mode#8#} "$@"
	fi
fi
